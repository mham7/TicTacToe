@page "/game"
@using TicTacToe.Services.Interfaces
@inject IGamService _game
@inject IPlayerService _player
@inject IGameHelper _cache
@rendermode InteractiveServer



<PageTitle>Tic Tac Toe</PageTitle>
<h1>Blazing Tic Tac Toe</h1>

@if (!_game.isGameStarted())
{
    @if (AppState())
    {
        <div>
            <label for="rows">Enter Size:</label>
            <input type="number" id="rows" @bind="rows" min="3" max="7" />

            <button @onclick="Start">Start Game</button>
        </div>
        @if (rows < 3 && rows > 7)
        {
            <p style="color: red;">Enter valid size between 3 and 7 for the best user experience.</p>
        }

    }
}

@if (_game.isGameStarted())
{
    <h4>Player @_player.GetPlayerId() turn</h4>
    <div class="grid">
        @for (int i = 0; i < rows; i++)
        {
            int row = i;
            <div class="row">
                @for (int j = 0; j < rows; j++)
                {
                  
                    int col = j;
                    int index = row * rows + col;
                    <div class="square"  @onclick="() => Play(row,col)">
                        <h5 class="char">@array[row,col]"</h5>
                    </div>
                }
            </div>
        }
    </div>

}
@if (ID != 0 && ID!=3)
{
    <div class="centered-text">
        <h1>Player @_game.CheckForWinner() wins!</h1>
        <button @onclick="Reset">Play Again</button>
    </div>
   
}
@if (ID== 3)
{
    <div class="centered-text">
        <h1>Match has ended in a draw</h1>
        <button @onclick="Reset">Play Again</button>
    </div>
    
}
@code {
    int rows;
    int ID = 0;
    char[,] array;
    protected override void OnInitialized()
    {
        array = new char[rows,rows]; 
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < rows; j++)
            {
                array[i, j] = '.';
            }
        }
    }
    private void Play(int row,int col)
    {
        if (array[row, col] == '.')
        {
            array[row, col] = _game.SetMove(row, col);
            int id =_game.CheckForWinner();
            if (id != 0)
            {
                ID = id;
                _game.StopGame();

            }

        }
    }
    private void Start()
    {
        if(rows>2 && rows<8){
            OnInitialized();
            _game.StartGame(rows);
        }

    }

    private bool AppState()
    {
        if (ID == 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    private void Reset()
    {
        _game.ResetGame();
        array = null;
        ID = 0;
    }

   
    
    
}
